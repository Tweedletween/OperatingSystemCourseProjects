
/**
 * Class WordCounter set n threads to count the frequency of every word,
 * and then merge the result of all the threads.
 *
 * @Miaoyan Zhang
 * @version Oct 23rd, 2016
 */

import java.util.*;

public class WordCounter
{

    public static void main(String[] args) {
        final int segments = 10;
        CounterThread[] counterThread = new CounterThread[segments];
        //The map the main thread merged
        Map<String, Integer> MergeMap = new HashMap<>();
        //The temp map the main thread get from every sub tread
        Map<String, Integer> MapPerSegment = new HashMap<>();
        List<Map.Entry<String, Integer>> sortedWordCounts = new ArrayList<>();

        Book pap = new Book("Pride and Prejudice.txt");
        System.out.println("Book has been read!");

        //new N threads and start to run
        for (int i = 0; i < segments; i++) {
            counterThread[i] = new CounterThread((pap.getLines() / segments + 1) * i, pap.getLines() / segments + 1, pap);
            counterThread[i].setName("Thread" + i);
            counterThread[i].start();
        }

        //Each sub thread waits for other thread before exit
        for (int i = 0; i < segments; i++) {
            try {
                counterThread[i].join();
            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
        }

        //Merge the map generated by each thread
        for (int i = 0; i < segments; i++) {
            MapPerSegment = counterThread[i].getSortedWordsMap();
            for(Map.Entry<String, Integer> entry : MapPerSegment.entrySet()) {
                String wordkey = entry.getKey();
                if (MergeMap.containsKey(wordkey)) {
                    int tmpFren = MergeMap.get(wordkey) + MapPerSegment.get(wordkey);
                    MergeMap.remove(wordkey);
                    MergeMap.put(wordkey, tmpFren);
                }
                else {
                    int tmpFren = MapPerSegment.get(wordkey);
                    MergeMap.put(wordkey, tmpFren);
                }
            }
        }

        //Map moved to List, so that can be sorted by value
        for(Map.Entry<String, Integer> entry : MergeMap.entrySet()) {
            sortedWordCounts.add(entry);
        }

        //Sort the map list by value in descending order, if with the same value, by key in ascending order
        Collections.sort(sortedWordCounts, new Comparator<Map.Entry<String, Integer>>(){
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2)
            {
                if (o1.getValue() != o2.getValue()) {
                    return Integer.compare(o2.getValue(), o1.getValue());
                } else {
                    return o1.getKey().compareTo(o2.getKey());
                }
            }
        });

         //Print the sorted word frequency merged and sorted by main thread
        int num = sortedWordCounts.size();
        for(int j = 0; j < num; j++){
            System.out.println("MainThread - " + sortedWordCounts.get(j).getKey() + ": " + sortedWordCounts.get(j).getValue());
        }
    }


}

